---
swagger: "2.0"
info:
  description: "OpenAPI specification for the RESTful API of the backend of the Hypermedia\
    \ application course project a.y. 2018/2019.\n"
  version: "3.0.0"
  title: "Hypermedia course API"
host: "polimi-hyp-2019-team-10489796.herokuapp.com"
basePath: "/v2"
tags:
- name: "Books"
- name: "Authors"
- name: "Account"
- name: "Cart"
- name: "Event"
schemes:
- "https"
paths:
  /books:
    get:
      tags:
      - "Books"
      summary: "Returns a preview of all the books filtered by keyword."
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "keyword"
        in: "query"
        description: "A keyword to match the book to."
        required: false
        type: "string"
      - name: "genre"
        in: "query"
        description: "The genre to filter the book by."
        required: false
        type: "string"
      - name: "theme"
        in: "query"
        description: "The theme to search the book by."
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Offset with regards to the current page."
        required: false
        type: "integer"
        default: 0
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Items per page."
        required: false
        type: "integer"
        default: 20
        format: "int64"
      responses:
        200:
          description: "A brief preview of all the books in the database matching\
            \ the search parameters."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                book_id:
                  type: "integer"
                  format: "int64"
                book:
                  $ref: "#/definitions/Book"
        400:
          description: "Bad request."
      x-swagger-router-controller: "Books"
  /books/favourites:
    get:
      tags:
      - "Books"
      summary: "Returns the favourite books."
      operationId: "booksFavouriteGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "The favourite books"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                book_id:
                  type: "integer"
                  format: "int64"
                book:
                  $ref: "#/definitions/Book"
        400:
          description: "Bad request."
      x-swagger-router-controller: "Books"
  /books/top10:
    get:
      tags:
      - "Books"
      summary: "Returns the top 10 books."
      operationId: "booksTop10GET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "The top 10 books"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                book_id:
                  type: "integer"
                  format: "int64"
                book:
                  $ref: "#/definitions/Book"
        400:
          description: "Bad request."
      x-swagger-router-controller: "Books"
  /books/{book_id}:
    get:
      tags:
      - "Books"
      summary: "Returns the full description of a book."
      operationId: "booksBookIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "book_id"
        in: "path"
        description: "Id of the book to retrieve."
        required: true
        type: "integer"
        format: "int64"

      responses:
        200:
          description: "The full description of the retrieved book."
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Bad request."
        404:
          description: "Book not found."
      x-swagger-router-controller: "Books"
  /books/{book_id}/similars:
    get:
      tags:
      - "Books"
      summary: "Returns the lists of books similar to a specific one."
      operationId: "booksBookIdSimiliarsGET"
      produces:
      - "application/json"
      parameters:
      - name: "book_id"
        in: "path"
        description: "The id of the reference book."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "A list of similar books."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                book_id:
                  type: "integer"
                  format: "int64"
                book:
                  $ref: "#/definitions/Book"
        400:
          description: "Bad request."
        404:
          description: "Book not found."
      x-swagger-router-controller: "Books"
  /books/{book_id}/reviews:
    get:
      tags:
      - "Books"
      summary: "Returns the lists of reviews of a specific book."
      operationId: "booksBookIdReviewsGET"
      produces:
      - "application/json"
      parameters:
      - name: "book_id"
        in: "path"
        description: "The id of the reference book."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "A list of reviews."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Bad request."
        404:
          description: "Book not found."
      x-swagger-router-controller: "Books"
  /books/{book_id}/events:
    get:
      tags:
      - "Books"
      summary: "Returns the lists of presentation events of a specific book."
      operationId: "booksBookIdEventsGET"
      produces:
      - "application/json"
      parameters:
      - name: "book_id"
        in: "path"
        description: "The id of the reference book."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "A list of events."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                event_id:
                  type: "integer"
                  format: "int64"
                event:
                  $ref: "#/definitions/Event"
        400:
          description: "Bad request."
        404:
          description: "Book not found."
      x-swagger-router-controller: "Books"
  /books/{book_id}/authors:
    get:
      tags:
      - "Books"
      summary: "Returns the lists of all authors of a specific book."
      operationId: "booksBookIdAuthorsGET"
      produces:
      - "application/json"
      parameters:
      - name: "book_id"
        in: "path"
        description: "The id of the reference book."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "A list of authors."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                author_id:
                  type: "integer"
                  format: "int64"
                author:
                  $ref: "#/definitions/Author"
        400:
          description: "Bad request."
        404:
          description: "Book not found."
      x-swagger-router-controller: "Books"
  /genres:
    get:
      tags:
      - "Books"
      summary: "Returns the lists of all available genres."
      operationId: "genresGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "A list of genres."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Genre"
        400:
          description: "Bad request."
      x-swagger-router-controller: "Books"
  /themes:
    get:
      tags:
      - "Books"
      summary: "Returns the lists of all available themes."
      operationId: "themesGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "A list of themes."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Theme"
        400:
          description: "Bad request."
      x-swagger-router-controller: "Books"
  /authors:
    get:
      tags:
        - "Authors"
      summary: "Returns a list of all the authors."
      operationId: "authorsGET"
      produces:
        - "application/json"
      parameters:
        - name: "offset"
          in: "query"
          description: "Offset with regards to the current page."
          required: false
          type: "integer"
          default: 0
          format: "int64"
        - name: "limit"
          in: "query"
          description: "Items per page."
          required: false
          type: "integer"
          default: 20
          format: "int64"
      responses:
        200:
          description: "A list of names, surnames and imgpath of all the authors in the database"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                author_id:
                  type: "integer"
                  format: "int64"
                author:
                  $ref: "#/definitions/Author"
        400:
          description: "Bad request."
      x-swagger-router-controller: "Authors"
  /authors/{author_id}:
    get:
      tags:
      - "Authors"
      summary: "Returns the full description of an author."
      operationId: "authorsAuthorIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "author_id"
        in: "path"
        description: "The id of the desired author."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The full description of the specified author."
          schema:
            $ref: "#/definitions/Author"
        400:
          description: "Bad request."
        404:
          description: "Author not found."
      x-swagger-router-controller: "Authors"
  /authors/{author_id}/books:
    get:
      tags:
      - "Authors"
      summary: "Returns the lists of books of an author."
      operationId: "authorsAuthorIdBooksGET"
      produces:
      - "application/json"
      parameters:
      - name: "author_id"
        in: "path"
        description: "The id of the reference author."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "A list of books of the author."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                book_id:
                  type: "integer"
                  format: "int64"
                book:
                  $ref: "#/definitions/Book"
        400:
          description: "Bad request."
        404:
          description: "Author not found."
      x-swagger-router-controller: "Authors"
  /events:
    get:
      tags:
      - "Events"
      summary: "Returns a list of all the events."
      operationId: "eventsGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Offset with regards to the current page."
        required: false
        type: "integer"
        default: 0
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Items per page."
        required: false
        type: "integer"
        default: 20
        format: "int64"
      responses:
        200:
          description: "A list of location, dates, descriptions, ids, and books of\
            \ all the Events in the database"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                event_id:
                  type: "integer"
                  format: "int64"
                event:
                  $ref: "#/definitions/Event"
        400:
          description: "Bad request."
      x-swagger-router-controller: "Events"
  /events/{event_id}:
    get:
      tags:
      - "Events"
      summary: "Returns the full description of an Event."
      operationId: "eventsEventIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "The id of the desired event."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The full description of the specified event."
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Bad request."
        404:
          description: "Event not found."
      x-swagger-router-controller: "Events"
  /account/cart:
    get:
      tags:
      - "Cart"
      summary: "Returns list of items present in the cart of the specified user."
      operationId: "accountCartGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "The list of items present in the cart."
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: "Bad request."
        401:
          description: "Unauthorized."
      security:
      - Bearer: []
      x-swagger-router-controller: "Cart"
    post:
      tags:
      - "Cart"
      summary: "Add item to cart."
      operationId: "accountCartPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "book"
        description: "The book to be added to cart."
        required: true
        schema:
          $ref: "#/definitions/book"
      responses:
        200:
          description: "Book added to cart."
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: "Bad request."
        401:
          description: "Unauthorized."
      security:
      - Bearer: []
      x-swagger-router-controller: "Cart"
    delete:
      tags:
      - "Cart"
      summary: "Remove an item from the cart"
      operationId: "accountCartDELETE"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "item"
        description: "Item to be removed"
        required: true
        schema:
          $ref: "#/definitions/item"
      responses:
        200:
          description: "Item removed."
        400:
          description: "Bad request."
        401:
          description: "Unauthorized."
      security:
      - Bearer: []
      x-swagger-router-controller: "Cart"
  /account/cart/checkout:
    post:
      tags:
      - "Cart"
      summary: "Buy the items in the cart."
      operationId: "accountCartCheckoutPOST"
      parameters: []
      responses:
        200:
          description: "Purchase successful."
        400:
          description: "Bad request."
        401:
          description: "Unauthorized."
      security:
      - Bearer: []
      x-swagger-router-controller: "Cart"
  /account/cart/empty:
    post:
      tags:
      - "Cart"
      summary: "Remove all items in the cart."
      operationId: "accountCartEmptyPOST"
      parameters: []
      responses:
        200:
          description: "Cart emptied."
        400:
          description: "Bad request."
        401:
          description: "Unauthorized."
      security:
      - Bearer: []
      x-swagger-router-controller: "Cart"
  /account/info:
    get:
      tags:
      - "Account"
      summary: "Returns info about a user."
      operationId: "accountInfoGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "The info about the specified user"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad request."
        401:
          description: "Unauthorized."
      security:
      - Bearer: []
      x-swagger-router-controller: "Account"
    post:
      tags:
      - "Account"
      summary: "Updates the info of an account."
      operationId: "accountInfoPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "account"
        description: "Account details."
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Account updated."
        400:
          description: "Bad request."
        401:
          description: "Unauthorized."
      security:
      - Bearer: []
      x-swagger-router-controller: "Account"
  /account/register:
    post:
      tags:
      - "Account"
      summary: "Registers a new user."
      operationId: "accountRegisterPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "User who wants to sign up."
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Registration successful."
          schema:
            type: "object"
            properties:
              user_id:
                type: "string"
        400:
          description: "Bad request."
        409:
          description: "Already registered."
      x-swagger-router-controller: "Account"
  /account/login:
    post:
      tags:
      - "Account"
      summary: "Login of a registered user."
      operationId: "accountLoginPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "login"
        description: "Login details."
        required: false
        schema:
          $ref: "#/definitions/login"
      responses:
        200:
          description: "Login successful."
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        400:
          description: "Bad request."
        401:
          description: "Wrong credentials."
      x-swagger-router-controller: "Account"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Book:
    required:
    - "imgpath"
    - "title"
    properties:
      abstract:
        type: "string"
      interview:
        type: "string"
      imgpath:
        type: "string"
      title:
        type: "string"
      current_price:
        type: "number"
        format: "float"
      num_of_pages:
        type: "integer"
      cover_type:
        type: "string"
        enum:
        - "hard cover"
        - "e-book"
        - "soft cover"
      genres:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/Genre"
      themes:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/Theme"
    example:
      themes:
      - {}
      - {}
      - {}
      num_of_pages: 6
      imgpath: "imgpath"
      genres:
      - {}
      - {}
      abstract: "abstract"
      current_price: 0.8008282
      title: "title"
      interview: "interview"
      cover_type: "hard cover"
  Author:
    required:
    - "imgpath"
    - "name"
    - "surname"
    properties:
      name:
        type: "string"
      surname:
        type: "string"
      biography:
        type: "string"
      imgpath:
        type: "string"
    example:
      surname: "surname"
      imgpath: "imgpath"
      name: "name"
  Event:
    required:
    - "date"
    - "imgpath"
    - "location"
    properties:
      book_id:
        type: "string"
      location:
        type: "string"
      date:
        type: "string"
      description:
        type: "string"
      organiser_email:
        type: "string"
      imgpath:
        type: "string"
    example:
      date: "date"
      imgpath: "imgpath"
      description: "description"
      location: "location"
      book_id: "book_id"
      organiser_email: "organiser_email"
  Review:
    required:
    - "rating"
    - "text"
    - "user_name"
    properties:
      user_name:
        type: "string"
      text:
        type: "string"
      rating:
        type: "integer"
    example:
      user_name: "user_name"
      rating: 0
      text: "text"
  Cart:
    properties:
      book_list:
        type: "array"
        items:
          $ref: "#/definitions/Cart_book_list"
      total_price:
        type: "number"
        format: "float"
    example:
      total_price: 5.637377
      book_list:
      - quantity: 5
        price: 1.4658129
        book_id: 0
        current_price: 6.0274563
        title: "title"
      - quantity: 5
        price: 1.4658129
        book_id: 0
        current_price: 6.0274563
        title: "title"
  User:
    required:
    - "name"
    - "surname"
    properties:
      user_id:
        type: "integer"
      email:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
    example:
      password: "test"
      surname: "test"
      name: "test"
      email: "test"
  Genre:
    type: "string"
    enum:
    - "thriller"
    - "scifi"
    - "novel"
    - "romance"
    - "fantasy"
    - "action"
    - "crime"
  Theme:
    type: "string"
    enum:
    - "love"
    - "friendship"
    - "war"
    - "travel"
    - "growth"
  inline_response_200:
    properties:
      book_id:
        type: "integer"
        format: "int64"
      book:
        $ref: "#/definitions/Book"
  inline_response_200_1:
    properties:
      event_id:
        type: "integer"
        format: "int64"
      event:
        $ref: "#/definitions/Event"
  inline_response_200_2:
    properties:
      author_id:
        type: "integer"
        format: "int64"
      author:
        $ref: "#/definitions/Author"
  book:
    type: "object"
    required:
    - "book_id"
    properties:
      book_id:
        type: "integer"
        format: "int64"
        example: 1
  item:
    type: "object"
    required:
    - "book_id"
    properties:
      book_id:
        type: "integer"
        format: "int64"
  inline_response_200_3:
    properties:
      user_id:
        type: "string"
    example:
      user_id: "user_id"
  login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    example:
      email: "test"
      password: "test"
  inline_response_200_4:
    properties:
      token:
        type: "string"
    example:
      token: "token"
  Cart_book_list:
    required:
    - "book_id"
    - "current_price"
    - "price"
    - "quantity"
    - "title"
    properties:
      book_id:
        type: "integer"
      title:
        type: "string"
      current_price:
        type: "number"
        format: "float"
      price:
        type: "number"
        format: "float"
      quantity:
        type: "integer"
        format: "int64"
    example:
      quantity: 5
      price: 1.4658129
      book_id: 0
      current_price: 6.0274563
      title: "title"
